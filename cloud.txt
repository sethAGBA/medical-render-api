Cloud Storage (Optional):
For production, use AWS S3:
Install aws-sdk:
bash

npm install aws-sdk
Update users.controller.ts:
typescript

import * as AWS from 'aws-sdk';
@Post('upload-photo')
@UseInterceptors(FileInterceptor('photo'))
async uploadPhoto(@Req() req, @UploadedFile() file: Express.Multer.File) {
  const s3 = new AWS.S3({
    accessKeyId: process.env.AWS_ACCESS_KEY_ID,
    secretAccessKey: process.env.AWS_SECRET_ACCESS_KEY,
  });
  const uploadResult = await s3.upload({
    Bucket: process.env.AWS_S3_BUCKET,
    Key: `profile-photos/${req.user.id}-${Date.now()}${extname(file.originalname)}`,
    Body: file.buffer,
    ACL: 'public-read',
  }).promise();
  const photoUrl = uploadResult.Location;
  await this.usersService.update(req.user.id, { profilePhoto: photoUrl });
  return { url: photoUrl };
}
Add to .env:
text

AWS_ACCESS_KEY_ID=your_key
AWS_SECRET_ACCESS_KEY=your_secret
AWS_S3_BUCKET=your_bucket
Remove diskStorage from users.controller.ts and MulterModuleâ€™s dest in users.module.ts.